// Prisma schema for Postgres
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid()) @db.Uuid
  email       String   @unique
  displayName String
  createdAt   DateTime @default(now())
  games       Game[]   @relation("CreatorGames")
}

model RuleCard {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  year      Int      @unique
  cardJson  Json
  createdAt DateTime @default(now())
  games     Game[]
}

model Game {
  id          String    @id @default(uuid()) @db.Uuid
  createdBy   String?   @db.Uuid
  creator     User?     @relation("CreatorGames", fields: [createdBy], references: [id])
  ruleCardId  String    @db.Uuid
  ruleCard    RuleCard  @relation(fields: [ruleCardId], references: [id])
  status      String    @default("pending")
  createdAt   DateTime  @default(now())
  startedAt   DateTime?
  completedAt DateTime?
  players     Player[]
  moves       Move[]
  shuffle     ShuffleCommit?
}

model Player {
  id        String  @id @default(uuid()) @db.Uuid
  gameId    String  @db.Uuid
  game      Game    @relation(fields: [gameId], references: [id])
  userId    String? @db.Uuid
  user      User?   @relation(fields: [userId], references: [id])
  seat      Int
  joinedAt  DateTime @default(now())

  @@unique([gameId, seat])
}

model ShuffleCommit {
  id                String  @id @default(uuid()) @db.Uuid
  gameId            String  @unique @db.Uuid
  game              Game    @relation(fields: [gameId], references: [id])
  clientSeed        String
  serverSeedCommit  String
  revealedServerSeed String?
  createdAt         DateTime @default(now())
}

model Move {
  id        BigInt   @id @default(autoincrement())
  gameId    String   @db.Uuid
  game      Game     @relation(fields: [gameId], references: [id])
  playerSeat Int?
  idx       Int
  move      Json
  createdAt DateTime @default(now())

  @@unique([gameId, idx])
}


